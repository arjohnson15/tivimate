package ar.tvplayer.tv;

import android.app.Application;
import android.content.Context;
import android.content.pm.Signature;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.zip.Deflater;
import p334.C3789;

/* loaded from: classes.dex */
public class ProtectedTvPlayerApplication extends Application {
    private static byte[] H = {-124, -44, 71, -100, 15, 3, 55, Byte.MIN_VALUE, -121, 24, -23, -33, -21, -83, -9, -10, 48, -122, -68, 88, -58, 0, -34, 81, -109, 106, -127, 92, -122, -44, -106, -12, -113, -33, -100, 7, 94, 106, -45, 37, 9, 69, 88, -36, 30, -26, -125, -97, -23, 46, -35, -110, -2, -121, -27, -96, 113, -126, -110, 17, -53, -75, 125, -53, 120, -24, 38, 94, -88, -63, 32, 48, -60, -90, 25, 112, -123, -86, -27, -118, -15, 66, 108, -12, -31, 15, -54, -44, -47, 34, -11, 24, 49, 51, -84, 123, 32, 103, 19, 57, 30, -102, -124, -81, 14, 45, -62, 59, 65, 68, -127, 86, -104, 72, -127, 84, -95, -96, 73, -3, 58, 83, 97, -45, 49, 82, 122, 43, 35, 103, 69, -51, -90, 107, 77, -59, -124, 44, 2, 109, -72, 67, -91, -21, -102, -113, 100, -126, -45, 52, 52, -84, -121, -58, 123, -93, -18, -1, 8, -122, 126, 89, 77, -102, -80, 104, -37, 56, 111, -9, 56, -65, 46, 17, 38, -107, 5, -95, 103, 108, 24, 124, 119, 79, -21, -60, 76, -108, 50, -45, 19, -49, -41, -49, 30, -55, -68, 21, 43, -79, -42, -58, 12, -77, 68, 42, -73, -19, -111, -66, 103, -80, 112, 102, 73, 56, 85, -73, -94, -30, 70, -116, 43, -64, 42, 105, 12, 38, -32, -94, 1, 116, 74, 88, 83, 124, -19, 75, 5, 79, -56, 58, 16, 54, 80, -4, -118, -35, 17, 112, -123, 124, -100, -12, 88, -112, -94, 54, -41, 60, 33, -122, -16, 81, -28, -122, -49, 60, -93, -30, -23, -76, 103, -25, -2, 63, -25, 57, -109, -86, -124, 18, 45, 90, -39, -8, 30, 92, -59, 30, 30, 82, -42, -84, 26, -123, -34, 95, -7, -33, 41, 17, -22, -20, -4, -89, 98, 54, -109, -24, 78, 117, -41, -24, -72, -84, 12, -127, 15, 40, -100, 39, 123, -94, -55, 68, 53, 79, -77, 2, 110, 54, -123, -74, -54, -89, -125, -76, 24, -2, 42, 34, 68, 79, 11, 20, 56, 101, 64, 41, -7, -3, 117, -115, -127, -25, -80, -1, -50, -34, -106, 39, -112, -103, -18, -94, 69, -3, 47, 110, -89, 109, -104, -71, 18, 78, -94, 60, -9, -16, 98, 16, -75, -63, 30, 55, -32, 119, 123, 87, 1, 123, 42, Byte.MIN_VALUE, -98, 87, 125, 22, 0, 25, 72, 6, 121, 35, 68, 81, 47, -84, 24, 80, -63, -40, 71, -48, -125, 42, -55, -56, 52, -13, -107, -122, 9, 4, 31, -28, 73, 30, -54, -9, -77, 126, 11, 71, -98, 31, 123, -122, 108, 109, 66, -5, -13, 106, 58, -47, 74, -109, 60, 40, -79, -44, 42, -73, 0, 119, -21, -117, 25, 38, 72, 40, 56, -36, 120, -43, 59, 108, 121, 93, -7, Byte.MAX_VALUE, 14, 17, -75, -45, -116, 17, -112, -111, -86, 93, -110, 22, 110, -48, 36, 52, -93, 43, 54, -42, -52, 119, -40, 84, 6, -12, 7, -54, 67, 22, -76, -102, -95, -122, -11, -83, 15, 12, -76, 63, 50, -60, -75, 14, -68, -68, 58, -15, 33, 8, -51, 29, 94, -84, -56, 64, -88, 64, -113, 115, 120, -41, 21, 17, 23, 85, 121, -81, -72, -86, 17, -59, 80, -114, -34, 126, 13, 28, 1, -82, -106, 82, -108, 102, -42, 93, -98, 88, -78, -101, -5, 63, -53, 124, -71, 108, -110, 50, -112, -80, 91, Byte.MIN_VALUE, -49, 74, 16, 107, -7, -11, -25, 11, -124, 102, Byte.MAX_VALUE, -28, 34, 25, 4, 106, 69, -105, -86, 28, 69, 20, 13, 36, -126, -40, 4, 78, 88, 87, -12, 35, -44, -125, 18, -69, 96, -41, -105, 72, 54, -102, 30, 94, 105, -97, -126, 69, -43, -62, -9, 65, 58, -26, -117, 40, -97, -17, 111, -14, -25, 36, -119, 25, 49, -35, 103, 114, -33, -73, 2, 22, -31, 44, -31, -6, 86, 96, 14, -80, 106, -24, -51, -105, -57, 75, -70, 103, 68, 2, 95, 108, -70, -73, -26, -1, 110, -37, -97, -121, -84, 46, 16, -100, 88, -21, -32, 32, 98, -20, 47, -40, 75, 20, -88, 48, 9, -35, -50, -26, -55, 90, -41, -21, 74, 59, -116, 31, 84, 114, 113, -93, -43, 38, 90, -127, 84, 48, 21, -20, -71, -8, -41, -124, -92, -72, 86, -87, 57, -102, -103, -51, -49, 64, 100, -12, -108, 119, 100, 97, 95, 9, -82, -16, 65, -78, 42, 120, 65, -73, -82, -106, -65, 112, 87, -72, 29, -108, 106, -29, -45, -90, -116, -104, 38, 66, -74, -12, -114, 120, -18, -71, -72, -76, -68, -64, -95, -109, -113, 36, 2, -104, 93, -115, -71, 107, -74, 74, 50, 14, 98, -25, -90, 46, 18, 4, -39, 19, -83, -57, -96, 38, -121, -53, -23, 30, -10, 30, -42, 23, -52, 22, -23, -24, -30, -125, -111, 84, -7, 36, 28, 4, -104, 44, -70, 73, 19, -34, -9, 46, -62, 12, 90, 83, -101, -50, -14, 121, -13, 9, -126, -36, 77, -102, 10, -76, 37, 8, 77, 104, 105, -99, 21, -63, -80, 59, 115, -68, -57, 50, 82, -113, -76, -65, 14, -97, -58, 86, -61, 95, 121, -45, -117, 87, -61, 36, 124, 67, -88, 126, -84, -54, 52, -26, 11, -98, 10, 106, -77, 34, -26, 73, 106, -79, 2, -47, 79, 62, -47, 87, -36, 19, -66, 2, 80, 96, -18, 7, 108, 118, -87, -114, -54, -62, -55, -14, 36, -9, 11, -10, 57, 57, 117, -46, -11, -1, -118, 18, 47, -16, 9, 66, Byte.MAX_VALUE, 40, 2, 25, -86, 15, 51, 123, -110, -125, 35, 101, -107, -46, -41, 55, -32, 28, -55, -46, 105, 54, 80, 120, -24, -61, -35, 98, 76, -120, -105, 111, -42, -107, -97, -75, -94, -91, 90, 22, 112, -82, -107, -44, 123, -63, -41, -117, -5, 32, -45, 21, -119, -67, 114, 0, 32, -8, -64, -24, -60, 42, -117, -3, 115, 91, 60, 98, -32, 50, -75, -104, 6, -58, 
    21, -43, 11, -119, -55, -49, -83, 92, 115, -88, -65, 87, -11, -11, 20, -118, -117, -110, 40, -5, 12, -81, 88, 124, 56, 124, 50, 76, -44, -44, -126, -42, 110, -99, 111, -27, 22, 2, 45, 36, -9, -67, 30, -88, -67, 64, -104, 20, -52, 104, -79, -34, -98, 106, -57, 50, 96, -8, -30, -39, 41, 94, 125, -65, 92, -1, 83, 106, -111, -102, 95, 126, 4, -48, 26, -23, -80, -51, 87, 75, -49, 88, -105, -117, -16, -27, 80, 26, 66, 119, 29, 94, -70, 75, -63, -16, 90, 50, 19, 2, 55, -22, 82, 31, -63, -91, 39, -28, 110, 45, -37, 41, -109, 125, 20, 71, -17, 67, 79, 10, 7, -54, 0, -35, -42, 91, 48, -15, 8, -14, 119, -82, -21, 44, -119, 114, -25, -95, 81, 78, -103, -36, 15, -84, 118, -86, -69, 67, 50, -30, -2, 103, 12, 65, -77, 123, -3, 62, 78, -81, 111, 72, 14, -72, -120, 121, 57, -71, 91, -2, Byte.MAX_VALUE, -42, -116, 111, 44, 47, -43, -106, 22, -45, -57, 18, -28, Byte.MIN_VALUE, 87, 66, -26, -80, -51, -69, 46, -52, -75, -26, -74, -116, 99, 85, 54, -5, 59, 89, -16, -62, 59, -102, 63, 41, 89, 81, -48, -113, 26, -29, 42, -126, -77, -76, -85, -7, 24, -113, 100, -105, -91, 30, -17, -34, 75, 1, 72, -127, 118, -13, -96, -102, -50, 7, -45, -28, -36, 109, Byte.MAX_VALUE, 59, -73, -60, -98, 51, -84, -32, -46, -36, -60, 115, 68, -105, -92, 91, 77, 62, 31, 13, -40, -63, Byte.MIN_VALUE, 16, 98, -126, -23, -56, 73, -24, 31, 28, -1, 124, -9, 81, -102, 74, -113, 108, 6, -82, -37, -101, 23, 29, 18, -102, 0, 113, -82, 21, 117, -59, 77, -119, -123, 96, -124, 55, -7, -84, -49, 72, 104, -117, 98, 80, -83, -20, -21, 97, -126, 104, -1, 82, 93, -68, 69, 73, 116, -114, -62, 123, 62, 80, 59, 121, 5, -4, 12, -98, 118, 48, -7, 104, -42, 35, -7, -89, -26, -25, 42, -25, 110, 118, 71, 3, 64, -74, -47, Byte.MIN_VALUE, -31, 78, -113, 87, -16, 126, 72, 82, -26, 109, -45, 119, -65, 64, -52, 56, -65, 45, -69, 19, 38, 14, -45, -93, -65, -23, -83, 10, 94, -59, -18, 58, -92, 50, 124, -109, 64, -102, 34, 124, -64, 72, 108, -126, 107, -122, -21, 10, 109, 125, 117, 85, 60, -40, -31, -27, 78, 56, 38, -22, 11, -80, 119, -64, -122, -24, 45, -34, -22, 9, 107, 6, -54, -22, -104, 94, 126, -4, 114, 35, -20, 12, -123, -79, -40, -95, 11, 89, -17, 94, -62, 31, -73, 81, 88, 24, 34, -100, 81, 95, 57, Byte.MIN_VALUE, -122, -76, -111, 26, 84, 76, 1, -80, -2, Byte.MIN_VALUE, 15, -18, 110, -25, 121, -39, -54, -72, 56, 108, -107, 17, -86, -6, 43, 38, 6, 45, 39, 10, 74, -108, -42, -79, 5, 121, -27, -125, 20, -29, -8, -83, Byte.MIN_VALUE, 62, 76, 75, -121, 31, 63, -103, -123, Byte.MIN_VALUE, 35, 19, -123, 48, -57, -127, 70, -3, 36, 12, -101, 43, -120, -127, -56, -100, -2, 91, -30, -98, -56, 97, 113, 12, 44, 26, -21, 72, -89, -115, 52, 104, 120, -27, -121, 60, -102, -30, -33, -82, -17, Byte.MIN_VALUE, -47, 126, -80, -7, 110, 22, -85, -57, 86, -21, -31, -2, -85, 126, 75, 75, 74, -10, -103, 47, 34, 126, -38, -32, 66, 74, -71, -125, -113, -45, 91, -37, -50, -6, -79, 61, 84, 72, -32, 71, -67, -76, -33, 33, -89, 80, 42, 6, -88, 13, 92, -52, 126, 40, 59, -25, 123, -75, 120, -41, 24, 125, -23, -3, -25, -104, 89, 88, -79, 46, -112, -112, -13, 86, -77, -5, 38, -41, -120, -104, -97, -82, 92, 78, -87, -85, 49, 123, -103, 94, 99, -50, -99, 59, -86, -124, -4, -124, -89, 20, -99, 80, -115, 21, -25, 0, 73, -31, -48, -119, 50, -83, -1, 48, 25, -124, -11, 85, -4, -76, 104, -60, -29, 44, 96, -82, 86, -52, -62, 9, -21, -20, 110, -3, 51, 9, -7, -51, -67, 8, 109, 48, -13, 97, -126, -19, -44, 33, -28, 108, 30, -30, 102, 70, -18, -59, -14, -75, -79, -42, 51, 59, -31, -98, -103, 124, -6, 113, 25, -86, -4, 120, -91, 40, 98, 13, -2, -34, 88, 34, 15, 37, -8, -59, 117, -77, -94, 15, -53, 42, -80, -100, -9, 76, 34, 75, -30, 10, -56, 97, 80, -52, Byte.MIN_VALUE, -87, 6, 49, 70, 2, -79, 83, Byte.MAX_VALUE, -115, -69, 4, 108, -54, 85, 26, 50, Byte.MAX_VALUE, 46, 3, 12, -90, 113, 36, -3, -120, 55, 25, -11, 92, -65, 116, -117, 26, -77, -32, 103, 10, -5, -111, -112, 6, -79, 116, 67, 18, -23, 102, -107, -123, -96, -119, 55, -17, 67, 77, -9, -97, -54, 73, 81, -65, -20, 53, 11, -83, -91, -98, 28, 13, 25, -120, 20, 115, -99, 97, -74, -98, -98, 11, 26, -115, -18, 4, 52, 49, 7, -16, -24, -83, 59, 37, -22, 122, -113, -66, -15, 31, -10, 59, -33, -56, 69, -76, -84, -79, -57, -116, -49, -104, 101, -78, 90, -19, 94, -106, -12, 12, -45, 45, -16, -107, 43, -101, -113, -8, 29, 115, -94, 69, 8, 9, -30, 66, 74, -61, -16, -114, 28, -24, -25, -90, -86, 41, -71, -86, 96, -50, 84, 115, 87, 43, 7, 33, 21, 36, -60, 84, 17, -114, 25, 65, -40, 46, -1, -108, -104, -54, 43, 110, 68, 87, -44, 51, 36, 48, 68, 83, -106, 31, 25, 108, -115, -30, 32, 90, -71, -10, 109, -123, 68, -5, 54, 42, -95, 66, 7, 76, 16, -3, 66, -14, -30, -15, -127, 4, -32, -28, -99, 6, -16, 107, 52, -83, -118, 58, 59, 120, 81, -20, -51, 101, 103, 2, -110, -2, 35, -9, 18, 110, 112, -55, -1, -18, 126, 87, -30, 30, -120, -71, 114, 63, -81, Byte.MAX_VALUE, -90, 18, -96, -127, 
    121, 88, -59, 93, 126, -111, 56, 78, 63, 109, -13, -49, -11, -82, 35, -8, -6, 121, 25, -55, 24, 82, -59, -101, 67, 109, -58, -116, -127, 103, 16, -115, 20, 67, -46, -118, -119, -90, -80, 60, 74, 117, 65, -24, 57, -58, -108, 113, -27, 11, 14, 103, 16, 24, 94, 119, -96, 48, 4, 45, 72, 125, 85, -58, 84, 1, -99, -68, -41, -16, -107, -59, -76, -5, 40, 54, -67, -126, 18, 89, -44, 92, -52, 76, -38, -19, 117, 108, 49, 23, 38, 105, -19, -54, -95, 1, 93, -92, 18, 72, -114, -95, -88, -60, -3, 42, -116, -86, 97, -99, -89, -112, -75, 109, -44, -68, 76, -23, 3, -119, -73, -97, -42, -20, 29, -67, 11, -2, -29, 53, 85, 43, -127, -54, -61, -86, 53, 71, -109, -64, -81, -98, 92, -3, 4, -102, 6, -114, -86, -99, -10, 56, -25, 67, -123, 46, 74, 88, 99, -95, -58, -13, -125, -91, 2, -122, 16, 102, -29, -51, 90, 32, 7, -123, 126, 104, 97, 80, 79, -88, 61, 91, 62, -8, -56, 46, -101, -42, -55, 8, 100, -17, -26, -120, 106, -32, -53, 71, 76, 31, -25, 15, 82, 22, 2, -9, 44, 7, -10, 67, 8, 107, 120, -13, 83, -12, -50, 82, -49, -28, -46, -100, 50, -82, 116, -76, -100, 60, -80, 30, 30, -107, 67, -74, -40, 109, 93, 57, -33, 37, 29, -30, -60, -14, -115, -59, 106, -92, 118, 109, -15, -65, 61, 15, 107, -110, -3, -1, -14, -91, 68, 121, 80, -13, 31, -120, -28, -7, -110, -29, -72, -85, 22, 33, 72, -15, 63, 28, 22, -25, 19, -27, 117, 43, -40, -100, 97, 75, 64, 77, -112, 25, 36, -115, -26, -71, -67, -70, 25, -124, 91, 115, 97, 47, -59, 23, -15, 35, -124, -97, -89, 50, -40, 60, 34, 68, -127, 92, 54, -79, 90, 8, 98, 64, -73, -63, 0, -19, -86, -20, 121, -24, -106, 65, 52, 44, -100, 47, 116, -71, 90, -27, 102, 24, -76, 26, 109, 20, 86, -35, -48, -100, 17, -107, -65, 44, -103, -127, 11, 20, 87, 58, 107, -79, 91, -26, -29, 38, -102, Byte.MIN_VALUE, 42, 41, -3, 59, -59, 54, 103, 40, 86, -119, 89, -20, 27, -4, 93, 15, 36, -35, -18, 60, 117, -8, -51, -29, -44, 88, -87, 72, -2, -19, -25, 115, -106, 26, -10, 92, -17, 25, -119, -90, -24, 60, -93, 81, -15, 74, -75, 92, 106, 25, 123, -7, 120, 51, 100, 70, 89, -4, 55, -108, -65, 4, -46, 54, -85, -77, -71, -27, -23, -38, 47, -60, 126, 65, 93, -34, 36, 97, -30, -23, -76, -49, 84, -114, 19, 67, 23, 85, 9, -5, 29, -124, -29, 125, -95, -77, 113, -118, -65, 122, 44, -99, -77, 56, 117, 0, 115, 36, 102, 56, 30, -89, 54, -47, 30, 72, 2, -57, Byte.MIN_VALUE, -24, -26, -3, 104, -4, -112, 45, 9, -14, -117, 82, 78, 125, -113, 5, 91, 49, 80, 45, -98, 16, -95, -11, 116, 26, -118, 59, 56, 32, -86, -92, -62, -17, 125, 92, -43, 89, 63, 53, 16, -25, 68, -77, 49, -127, -104, -5, 126, 12, 104, -38, -64, 100, 60, 83, -47, 52, 94, -93, -10, 65, -40, -63, -51, -25, 25, -60, Byte.MIN_VALUE, -64, 22, Byte.MAX_VALUE, -38, -24, 23, 99, -86, 103, -23, -31, -3, -73, -120, 39, 39, -98, 41, -116, 84, 6, 77, 7, -58, -123, 4, -100, -13, -84, 118, -1, 109, -63, 87, -56, -107, 107, 26, 125, 54, -97, -16, -123, -25, -119, 7, -70, 87, -103, -65, -45, -29, -86, -85, -84, 9, -18, 24, -82, 21, -112, 31, -126, -36, 109, -29, 43, 114, 86, -96, 95, 37, 85, 40, -107, -66, 107, -52, -9, -30, 14, -86, -13, 80, 93, 119, -115, -41, 15, -67, -83, 67, -81, 78, -10, 117, -46, 65, 110, 54, 4, 59, 96, -102, -96, -49, 0, -54, 33, -53, -84, -117, -23, 8, 2, 122, -46, 33, -39, -3, -42, 64, 43, 7, 10, 0, -28, -16, 62, -30, 107, -107, 107, -39, -118, 57, 3, -84, -67, -30, 20, -4, 26, 30, -4, -22, 90, -27, 60, 76, -50, -80, 16, 70, -63, -99, 54, 43, 55, 123, 84, -127, -100, -83, -28, 79, 72, 63, -47, 18, 95, 53, 58, 40, 9, -121, 33, 84, -29, -35, 119, -83, 7, -95, 94, -73, -86, -114, -84, -19, -89, 11, -118, 6, -28, -87, 116, 1, 68, 72, -90, -19, -92, 27, 62, -57, -13, -26, -45, -28, 24, 66, -104, -65, -50, -37, -20, 89, -45, -85, 63, -113, -15, -75, 34, 126, 30, 75, 82, -117, 73, -29, -58, -1, 98, 95, 48, 117, 55, -97, -26, 98, -35, -19, 92, -32, 26, -46, -122, 95, 78, 6, 77, -86, -38, 24, 80, 6, -89, 39, 97, 97, 10, -95, 91, 3, -108, -26, Byte.MAX_VALUE, -21, 10, -55, 14, 55, -55, -38, -104, 111, 87, -103, -105, -16, 83, 61, 48, 50, -14, 59, 98, -78, 45, 41, 44, -45, -73, 67, 101, 50, -97, 93, -77, -93, 85, 26, 125, 71, 30, 92, -48, 17, -93, 31, 78, 98, 110, 98, 71, -48, -7, -118, 62, -126, 18, 39, -28, 93, 102, -84, -87, 124, -98, 43, -30, 21, -112, -107, 58, 41, 115, 34, 38, -118, -52, 57, -110, -62, -67, 28, -82, 0, -101, 19, -17, 56, 67, 68, -79, 42, -55, -83, 48, -94, 105, 110, 32, 82, -89, 65, -56, -63, 92, 59, -9, -18, -36, -83, 92, 86, -18, 111, 60, 68, -9, -69, 68, -117, 70, -21, -41, 10, 22, -99, 14, 14, -120, 57, 112, 84, 75, -72, -122, 89, 63, -87, 60, 25, -23, 121, 98, 13, -10, -21, 18, -78, 26, -34, -83, 53, -88, 49, -86, 113, -30, 78, 39, 44, 29, 30, 99, -11, -34, 93, 109, -7, 25, 16, -62, -92, -74, 46, 46, 5, 92, 
    84, -51, 117, 117, 46, 31, -4, -44, -27, 63, -105, 53, -68, -125, 24, 100, -118, 98, 57, -100, 4, -26, -4, 76, 94, -41, 21, -76, -17, 75, -102, 89, -8, 103, -27, 15, -77, -7, 54, -54, -10, 42, -88, -79, -89, -91, 50, Byte.MIN_VALUE, -125, 108, -43, -36, -75, 54, -29, -46, -31, 96, 87, -36, -51, -79, 48, 29, 26, -56, -18, -51, 87, -84, 16, 106, -80, 5, -31, -87, 5, -50, -72, 104, 60, 114, -14, 74, 41, -35, -90, 54, -94, -32, 69, 10, -4, 35, 75, -70, 115, 25, -30, -95, 68, 108, 27, -32, 7, 38, -9, -98, -29, 76, 97, -8, -72, -112, -48, -88, 104, -107, 30, -87, -114, -108, -49, -16, -127, 6, -92, 8, 16, -72, 10, 65, 4, 71, -56, -70, 97, -106, -67, 13, -32, 119, 5, 123, -62, 32, -2, -92, -60, 40, -21, -46, -6, 93, 51, 110, -42, -22, 62, -21, 112, 109, -31, 39, -79, -50, -65, 13, -26, 9, 120, -7, -108, -20, 49, -127, -25, 80, 39, -43, 6, 85, -4, 38, 1, 38, 85, Byte.MAX_VALUE, -49, -1, 70, 59, 64, -55, -8, 36, -36, 57, 2, 84, -80, 87, 46, 72, Byte.MIN_VALUE, -80, -93, 71, 18, 14, -86, 11, -39, 38, 50, 64, -64, -120, -31, -91, -113, -81, -83, -113, -16, -9, -47, 92, -120, -89, 47, 14, -9, -16, 38, 85, 10, 96, -20, -27, 53, 31, -86, -66, -93, -80, 99, 9, -37, 40, -86, 34, 43, -94, 83, -93, 104, 121, 26, 31, 115, -50, 39, -35, 123, 102, 35, -1, 46, 126, 43, -30, 37, 95, 36, 17, -122, -79, 41, 107, -39, -33, 3, 51, -24, -34, -47, -47, 43, -3, 105, -112, -64, -74, 35, 26, -17, -118, -122, 18, 70, 22, 111, 77, 94, 5, 31, 117, -102, -58, 65, 101, 65, -12, -108, 65, 49, -42, -46, -8, 49, 50, 46, -8, -60, 35, -56, 5, -112, -124, 73, -11, -112, 4, -118, -101, -80, 90, -1, -43, -19, -6, 104, 81, -59, 20, 60, 34, -57, 125, 86, 79, 110, 1, 6, -72, -54, -31, -76, 65, 100, -67, -75, -95, -52, -111, -76, -41, 119, -104, 18, 123, -30, -44, -82, 106, -45, 120, 105, -73, -106, 10, 28, -18, 11, 30, -122, 74, 51, -108, 25, -93, -12, -96, 25, -73, 49, 20, -51, -7, -94, -105, -97, 36, 83, -35, -8, 86, -17, -54, -18, -7, -84, -75, 49, 54, 72, 121, 66, -35, -83, 50, 60, -113, 11, 53, 45, 117, -55, 33, 0, 66, 61, -37, 26, 50, -105, 55, -83, -77, 85, -113, -20, -26, -50, -69, -10, 108, -78, 93, -15, 5, -75, 86, -115, -20, -85, 61, -105, -75, 102, 19, 49, 109, 13, -44, -43, 36, -69, -48, 53, -14, 108, -80, -105, -78, 92, -53, -40, -127, 4, -3, Byte.MAX_VALUE, -31, -24, 37, -8, -58, -127, 87, -77, 122, 72, 94, 61, -37, 66, 45, 114, 117, -95, 4, 72, -14, 107, -42, -35, 58, 58, -29, 84, -126, 52, 105, 7, 75, -39, 108, -74, 58, 85, 63, Byte.MAX_VALUE, 101, 55, -109, 112, 68, -4, Byte.MAX_VALUE, 15, 70, -63, 61, 1, 75, -50, 60, Byte.MAX_VALUE, -13, 111, 91, 50, -121, -55, -19, -6, 77, -20, 16, 49, 82, 25, 93, -26, 7, 60, 5, -120, 113, -102, 12, -32, 73, 37, -122, -92, 5, -67, -10, -122, -5, -55, -104, -126, -74, -68, 109, -13, -55, 20, -58, 40, 122, 36, -103, -95, -42, 93, 50, 31, 90, -19, 126, 8, 112, 118, -68, -71, 93, 50, 91, 20, -90, -122, 70, -99, Byte.MIN_VALUE, 84, -125, 82, 43, 49, -47, 90, -26, 80, 4, 70, 78, 26, 118, -114, 29, -91, -78, Byte.MIN_VALUE, 118, -94, 3, 9, -100, 112, 33, 46, 39, 40, -111, 33, -120, Byte.MIN_VALUE, 111, 31, -118, 82, 109, -37, 8, 1, 46, -9, -65, 10, 84, 17, 68, -100, 124, -74, -105, -52, -73, 124, 89, -32, -88, 117, 86, 9, -109, 48, -81, 36, -33, -21, -100, 65, -126, 32, 69, -126, 93, 37, -105, 73, -23, 62, -62, 20, 98, -37, -83, -18, 65, 117, 52, -88, -32, -66, -26, -1, 6, 46, 47, 102, -14, -80, -28, -75, 3, -19, 47, 105, -53, -14, -104, -30, 60, 104, 29, -59, -99, 39, 68, 86, -94, 14, 14, 3, -114, 29, -70, 3, -21, Byte.MIN_VALUE, -51, 25, 63, -47, -75, 85, -82, 63, 32, 119, -24, -99, 94, -3, 56, 85, -48, 124, 104, -48, 7, 107, 126, -52, -4, 72, 102, -50, -16, -35, 119, 82, -71, 47, 97, -61, -67, -24, -65, 83, -60, -27, 53, 10, 79, -25, 40, 123, 53, 93, 113, -41, 106, -99, 63, -72, 83, 121, -9, -85, -12, 43, 45, 47, -99, 106, -21, 17, 54, 52, 2, 36, 17, -41, 119, 51, 39, 36, 77, 78, -99, 117, 83, -76, 84, 58, -92, 86, -16, -116, -83, 124, 96, 110, 73, 8, 50, 95, -82, 26, -68, -66, -1, -117, -47, 9, -112, 123, 34, 49, -2, 97, -52, -2, 113, -86, 3, 24, -120, -114, -2, -118, -44, -126, -41, -91, -98, 107, -86, -120, -121, 69, 33, 15, -113, -46, 80, 121, -106, -54, -19, 27, 100, 72, 63, -73, -77, -121, -105, 110, -109, 34, -70, 105, -32, -89, 21, -63, 36, 18, 91, -98, -66, 74, Byte.MAX_VALUE, 62, 44, 77, 102, -77, -64, 62, 111, 31, -42, -21, 65, -76, -60, 116, 21, 64, 116, -95, 5, 106, -92, 75, 42, -12, 73, -64, -62, 28, -49, -20, 11, -84, 41, 103, -80, -58, -54, 83, -100, -34, -72, -57, 117, -10, -27, -43, -94, -124, -85, 21, -27, -41, -12, 110, 27, -97, 48, -16, -42, -61, 115, 63, 57, -95, -44, 27, -19, 41, -108, -62, 29, 94, 31, 93, -113, 85, -122, -94, 70, -62, -53, -82, -6, -120, -89, 9, -76, -103, -31, -70, 35, 2, 45, 47, -82, 93, 66, 103, -105, 
    19, 56, -15, -120, -93, -105, -115, -30, 123, -4, -85, 44, 49, 79, 124, -52, 14, 94, 83, -31, 35, -31, -99, 5, 15, -112, -41, -76, -79, -51, 102, 25, -23, -21, 42, 60, 53, -119, -1, 125, -81, 93, -47, 4, -76, -118, 54, -21, -115, 123, -19, 23, 102, -95, -38, 45, 91, -81, 27, 108, 10, -113, -106, -19, -60, -80, -28, 65, 9, 67, -48, -13, 95, -38, -127, -68, 13, -15, -22, -118, -73, 50, -10, 76, 49, 114, 126, -67, -63, 66, -39, 115, 3, -33, 112, -113, -56, 83, -125, -80, -31, 24, 50, -33, 77, -46, 23, -28, 94, 105, 96, -113, -45, 6, -127, 32, -53, -116, -10, -92, 101, 24, -71, 103, -9, -68, 53, 26, 126, 126, 80, -24, -56, 68, -6, 69, -36, 121, 55, -43, 20, 99, 95, -45, 39, 56, 81, 48, 8, -124, -58, 27, 88, 86, 70, -51, 35, -19, 95, Byte.MIN_VALUE, 23, Byte.MAX_VALUE, 60, -30, -115, 96, 107, -21, -97, 102, -77, -111, 2, -34, -127, 117, 65, 34, 22, 56, 71, 42, 101, 113, -8, -15, -31, -63, 26, 1, -100, -78, -124, 35, -30, 44, -23, -103, 14, -42, Byte.MIN_VALUE, -103, -87, 27, -103, 71, -33, 35, 47, 119, 44, 51, 24, -104, 34, 27, 85, -60, 26, -120, -51, -42, 43, 89, 99, 20, 67, 49, 120, -59, 56, 109, 101, 111, 101, 14, -45, -22, -122, 75, -95, 58, 79, 1, -33, -48, -47, 40, -15, 33, -51, 81, 63, 61, -55, -35, -88, -32, -67, -87, 109, 75, -68, -18, 73, -52, 96, -67, -62, 58, 115, -4, 39, -77, -76, -42, -80, 92, -26, 63, -12, 42, -125, -4, 103, 107, 38, 29, -127, 45, 116, -5, 98, 8, 107, -97, -12, -101, -115, -127, -42, -75, 72, 80, -51, -104, 9, -64, 105, 87, 51, -12, 82, 101, -38, -68, -31, 39, -119, 69, -26, -110, -124, 1, 14, 47, 103, -70, 83, 43, -3, 57, 48, 107, -14, -26, -86, 82, -4, 55, 41, -4, -106, 13, 4, -21, -67, 93, 73, 108, -65, 33, 115, 97, -83, 22, -125, -111, 98, 12, 126, 105, 56, -31, 84, -35, -104, -49, -9, 72, -117, -124, 29, -91, -30, 66, -91, 82, 19, -3, 118, -21, -109, 69, -28, -106, 52, -94, 61, -80, -86, 27, 101, 19, -34, -81, 25, -116, -1, 80, 102, 82, -36, 8, -72, -97, -116, 34, -121, 91, 95, 61, -25, 84, 90, -98, -121, 76, 67, 25, -72, -64, 21, 10, -78, 9, -22, -47, 100, -43, 11, -33, 1, -97, -45, 28, -116, 2, 93, 44, 82, -114, -22, 90, 4, -104, 101, 35, 106, -16, -43, 117, 15, 73, -73, 68, -21, 74, 64, -8, -87, -3, -15, 112, 23, -42, 25, 84, -110, 49, 92, -77, 44, 74, 35, -9, -89, 65, -32, -115, 81, -68, -42, -50, 17, 85, -11, -52, -32, -94, 124, -74, 126, 61, -12, -14, 14, 9, -16, 64, -83, 86, -101, 60, 121, -57, -41, 81, 50, -75, 52, 29, 9, -57, 89, -123, -7, 58, -118, -81, -110, 74, -11, 126, -35, -108, -86, 6, 116, -37, 107, -108, -27, 103, 72, 21, -18, 113, -64, -4, 16, 62, -113, -9, -32, -27, -80, -103, -36, 105, -32, -34, 101, 115, -51, 83, -46, 72, -72, 68, 46, -2, -14, 123, -57, 115, -102, 16, 89, 32, -3, 55, 53, 16, 15, 104, -122, -63, 95, 10, -48, 97, -10, 118, 105, -58, -54, -53, -76, -81, 102, 14, 38, -18, 43, -94, 37, -80, -115, -71, -9, 79, 117, 95, -126, 13, -18, 100, 118, 89, -57, 26, -80, 41, 7, 46, -93, 42, 16, -121, 122, 89, -60, -22, 21, -109, -114, 21, 99, 76, 116, -60, -123, 69, 26, 56, 49, -81, 125, -118, 115, -108, -11, -90, 86, 24, -83, 112, 59, 52, 101, 119, -8, 55, 22, -66, 57, -57, 81, 40, -105, -53, 120, 35, 83, 41, -121, 98, -116, 105, -12, 46, 22, 11, 31, 49, 120, 103, -120, -26, -123, 24, -1, 51, 79, -112, -33, -97, 110, 45, -16, -6, -77, 57, -100, -27, -65, 41, -23, -57, -30, 35, 76, 55, -1, -20, 17, 60, 121, 117, 31, 25, 64, -99, 58, 11, -62, -57, -105, 116, -97, 43, 97, 107, -39, -113, -76, 39, -106, 83, 89, 90, 62, 40, -112, 52, -49, -59, -101, 25, -84, -55, 67, 2, 94, -122, -9, 2, -123, 104, -5, 91, -55, 86, 16, 89, -83, 71, -116, -4, 38, -81, 86, 110, 87, -126, 21, -51, -78, -79, -102, 14, 42, 108, 73, 51, 55, 11, -123, 33, 64, 104, -38, -108, -69, -126, 11, 21, 107, 26, 68, 98, -55, -15, -5, -52, 73, 21, -23, 37, -54, -19, 93, -57, Byte.MAX_VALUE, -3, -60, 111, -30, 19, 109, 43, 51, 43, -115, 72, -2, 97, 116, -92, 35, 120, -73, 110, -38, 31, -85, 83, 51, -11, -15, 116, -110, 0, -63, -13, -113, 12, 107, -70, -46, 108, -56, 71, -125, -51, -23, -41, -29, 66, 55, 122, -79, -126, 37, 20, -125, 12, -89, -121, Byte.MIN_VALUE, 117, -119, 82, -93, 62, -9, -113, 30, 117, -83, -30, 25, 8, -78, -9, -78, -39, -90, 87, -102, 23, 17, 110, -83, -103, -123, 11, -51, -105, -70, -87, 29, 27, 104, 118, -62, 15, -53, -18, 124, -17, 73, 73, -55, -51, -110, 55, -111, 126, 20, 66, -105, -32, 92, 94, -26, 0, 124, 87, -87, -86, -105, 24, 121, -24, 119, 61, -98, -17, 112, 73, -49, 15, 54, 48, 70, 22, -42, -19, -83, -30, 69, -119, 36, 69, 124, -125, -127, -74, -20, -3, 7, 5, -62, 68, -82, 15, 34, -95, 55, -22, 36, -17, -20, -113, 21, -3, -11, 109, 110, -12, 4, 47, -25, -125, -126, -29, -82, -126, -94};
    private static Object eBBuD;

    public class G implements Runnable {
        private final String BrC;
        private final Context HDgs;
        private final Throwable p;

        G(Context context, Throwable th, String str) {
            this.HDgs = context;
            this.p = th;
            this.BrC = str;
        }

        static void B(Context context, Throwable th) {
            dCE(context, th, null);
        }

        private static void DqwIIAc(Context context, Throwable th, String str) {
            throw nopvsD(th, str);
        }

        static void FfA(Context context, Throwable th, String str) {
            new Handler(Looper.getMainLooper()).postAtFrontOfQueue(new G(context, th, str));
        }

        static void dCE(Context context, Throwable th, String str) {
            if (Build.VERSION.SDK_INT < 35) {
                DqwIIAc(context, th, str);
            } else {
                FfA(context, th, str);
            }
        }

        private static String iuCgztCxr() {
            UUID uuidRandomUUID = UUID.randomUUID();
            long mostSignificantBits = uuidRandomUUID.getMostSignificantBits();
            return new UUID((mostSignificantBits & 65535) | (System.currentTimeMillis() << 16), uuidRandomUUID.getLeastSignificantBits()).toString();
        }

        private static MessageGuardException nopvsD(Throwable th, String str) {
            return new MessageGuardException(th, null);
        }

        static void ywyAf(Context context, Throwable th) {
            FfA(context, th, null);
        }

        @Override // java.lang.Runnable
        public void run() {
            DqwIIAc(this.HDgs, this.p, this.BrC);
        }
    }

    public class e {
        private final byte[] b;
        private int i;

        public e(byte[] bArr) {
            this.b = bArr;
            this.i = 0;
        }

        public e(byte[] bArr, int i) {
            this.b = bArr;
            this.i = i;
        }

        public void An(int i) {
            this.i += i;
        }

        byte[] bJ(int i, int i2) {
            byte[] bArr = new byte[i2];
            System.arraycopy(this.b, this.i + i, bArr, 0, i2);
            return bArr;
        }

        void g(int i, byte b) {
            this.b[this.i + i] = b;
        }

        public void gABz(int i, int i2) {
            byte[] bArr = this.b;
            int i3 = this.i;
            Arrays.fill(bArr, i3, i3 + i2, (byte) i);
        }

        int hDe(int i) {
            return f.mf(this.b[this.i + i]);
        }

        void k(byte[] bArr, int i) {
            System.arraycopy(bArr, 0, this.b, this.i + i, bArr.length);
        }

        byte krI(int i) {
            return this.b[this.i + i];
        }

        public e naAr(int i) {
            return new e(this.b, this.i + i);
        }
    }

    public class f {
        static final /* synthetic */ boolean $assertionsDisabled = false;
        private static final int D = 40;
        private static final int H = 10;
        private static final int b = 3;
        private static final int glI = 1;
        private static final int jn = 3;
        private static final int mzF = 40;
        private static final int zzh = 30;
        private static final int wBC = euj(40);
        private static final byte[][] d = {new byte[]{-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, new byte[]{-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28}, new byte[]{-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}, new byte[]{-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}};
        private static final byte[][] j = {new byte[]{-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25}, new byte[]{-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49}, new byte[]{-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68}, new byte[]{-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81}};
        public static int esm = 0;
        public static int Eh = 1;
        public static int rjs = 2;
        public static int E = 3;

        private static void AD(byte[] bArr, int i, int i2, byte[] bArr2) {
            byte b2 = j[i2][i];
            byte b3 = d[i2][i];
            int iJoo = joo(i) / 8;
            int iQHti = qHti(i, i2);
            int i3 = b2 - (iJoo % b2);
            int i4 = (iJoo / b2) - b3;
            byte[] bArr3 = new byte[zzh];
            I(b3, bArr3);
            e eVar = new e(bArr);
            e eVar2 = new e(bArr);
            int i5 = 0;
            while (i5 < b2) {
                int i6 = (i5 < i3 ? 0 : 1) + i4;
                e eVarNaAr = eVar2.naAr(iQHti);
                x(eVar, i6, bArr3, b3, eVarNaAr);
                int i7 = 0;
                int i8 = i5;
                while (i7 < i6) {
                    if (i7 == i4) {
                        i8 -= i3;
                    }
                    bArr2[i8] = eVar.krI(i7);
                    i7++;
                    i8 += b2;
                }
                int i9 = 0;
                int i10 = iQHti + i5;
                while (i9 < b3) {
                    bArr2[i10] = eVarNaAr.krI(i9);
                    i9++;
                    i10 += b2;
                }
                eVar.An(i6);
                i5++;
            }
        }

        public static int Ayb(byte[] bArr) {
            if (bArr == null) {
                throw new AssertionError();
            }
            int iMf = mf(bArr[0]);
            if (21 > iMf || iMf > 177) {
                throw new AssertionError();
            }
            return iMf;
        }

        public static Bitmap GbH(byte[] bArr, int i, boolean z, int i2, int i3) {
            return xo(q(bArr, i, z), i2, i3, 6);
        }

        private static void GsmA(byte[] bArr, int i, int i2, boolean z) {
            int iAyb = Ayb(bArr);
            if (i < 0 || i >= iAyb || i2 < 0 || i2 >= iAyb) {
                return;
            }
            mH(bArr, i, i2, z);
        }

        private static void I(int i, byte[] bArr) {
            if (1 > i || i > zzh) {
                throw new AssertionError();
            }
            Arrays.fill(bArr, (byte) 0);
            bArr[i - 1] = 1;
            byte bOmuo = 1;
            for (int i2 = 0; i2 < i; i2++) {
                for (int i3 = 0; i3 < i; i3++) {
                    bArr[i3] = omuo(bArr[i3], bOmuo);
                    if (i3 + 1 < i) {
                        bArr[i3] = (byte) (bArr[i3] ^ bArr[i3 + 1]);
                    }
                }
                bOmuo = omuo(bOmuo, (byte) 2);
            }
        }

        static void IEv(byte[] bArr, byte[] bArr2, int i) {
            if (i < 0 || i > 7) {
                throw new AssertionError();
            }
            int iAyb = Ayb(bArr2);
            for (int i2 = 0; i2 < iAyb; i2++) {
                for (int i3 = 0; i3 < iAyb; i3++) {
                    if (!II(bArr, i3, i2)) {
                        boolean z = $assertionsDisabled;
                        switch (i) {
                            case 0:
                                if ((i3 + i2) % 2 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case 1:
                                if (i2 % 2 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case 2:
                                if (i3 % 3 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case 3:
                                if ((i3 + i2) % 3 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case 4:
                                if (((i3 / 3) + (i2 / 2)) % 2 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case 5:
                                if (((i3 * i2) % 2) + ((i3 * i2) % 3) == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case C3789.STRING_SET_FIELD_NUMBER /* 6 */:
                                if ((((i3 * i2) % 2) + ((i3 * i2) % 3)) % 2 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            case C3789.DOUBLE_FIELD_NUMBER /* 7 */:
                                if ((((i3 + i2) % 2) + ((i3 * i2) % 3)) % 2 == 0) {
                                    z = true;
                                    break;
                                }
                                break;
                            default:
                                throw new AssertionError();
                        }
                        mH(bArr2, i3, i2, II(bArr2, i3, i2) ^ z);
                    }
                }
            }
        }

        static int IFj(int[] iArr, int i) {
            int i2 = iArr[1];
            if (i2 > i * 3) {
                throw new AssertionError();
            }
            boolean z = i2 > 0 && iArr[2] == i2 && iArr[3] == i2 * 3 && iArr[4] == i2 && iArr[5] == i2;
            return ((!z || iArr[0] < i2 * 4 || iArr[6] < i2) ? 0 : 1) + ((!z || iArr[6] < i2 * 4 || iArr[0] < i2) ? 0 : 1);
        }

        private static boolean II(byte[] bArr, int i, int i2) {
            int iMf = mf(bArr[0]);
            if (21 > iMf || iMf > 177 || i < 0 || i >= iMf || i2 < 0 || i2 >= iMf) {
                throw new AssertionError();
            }
            int i3 = (i2 * iMf) + i;
            return wlm(mf(bArr[(i3 >>> 3) + 1]), i3 & 7);
        }

        static void Im(int i, int i2, byte[] bArr) {
            if (i2 < 0 || i2 > 7) {
                throw new AssertionError();
            }
            int i3 = (new int[]{1, 0, 3, 2}[i] << 3) | i2;
            int i4 = i3;
            for (int i5 = 0; i5 < H; i5++) {
                i4 = (i4 << 1) ^ ((i4 >>> 9) * 1335);
            }
            int i6 = ((i3 << H) | i4) ^ 21522;
            if ((i6 >> 15) != 0) {
                throw new AssertionError();
            }
            for (int i7 = 0; i7 <= 5; i7++) {
                mH(bArr, 8, i7, wlm(i6, i7));
            }
            mH(bArr, 8, 7, wlm(i6, 6));
            mH(bArr, 8, 8, wlm(i6, 7));
            mH(bArr, 7, 8, wlm(i6, 8));
            for (int i8 = 9; i8 < 15; i8++) {
                mH(bArr, 14 - i8, 8, wlm(i6, i8));
            }
            int iAyb = Ayb(bArr);
            for (int i9 = 0; i9 < 8; i9++) {
                mH(bArr, (iAyb - 1) - i9, 8, wlm(i6, i9));
            }
            for (int i10 = 8; i10 < 15; i10++) {
                mH(bArr, 8, (iAyb - 15) + i10, wlm(i6, i10));
            }
            mH(bArr, 8, iAyb - 8, true);
        }

        private static int Jkk(int i, int i2, int i3) {
            if (i < 0 || i > 32767) {
                throw new AssertionError();
            }
            if (i2 < 0 || i2 > 32767) {
                throw new AssertionError();
            }
            int iUni = uni(i3);
            if (iUni < 0 || iUni > 16) {
                throw new AssertionError();
            }
            if (i >= (1 << iUni)) {
                return -1;
            }
            long j2 = 0 + iUni + 4 + i2;
            if (j2 > 32767) {
                return -1;
            }
            return (int) j2;
        }

        private static void dz(byte[] bArr, int i) {
            int i2;
            int iAyb = Ayb(bArr);
            int i3 = 7;
            while (true) {
                if (i3 >= iAyb - 7) {
                    break;
                }
                mH(bArr, 6, i3, $assertionsDisabled);
                mH(bArr, i3, 6, $assertionsDisabled);
                i3 += 2;
            }
            for (int i4 = -4; i4 <= 4; i4++) {
                for (int i5 = -4; i5 <= 4; i5++) {
                    int iAbs = Math.abs(i5);
                    if (Math.abs(i4) > iAbs) {
                        iAbs = Math.abs(i4);
                    }
                    if (iAbs == 2 || iAbs == 4) {
                        GsmA(bArr, i5 + 3, i4 + 3, $assertionsDisabled);
                        GsmA(bArr, (iAyb - 4) + i5, i4 + 3, $assertionsDisabled);
                        GsmA(bArr, i5 + 3, (iAyb - 4) + i4, $assertionsDisabled);
                    }
                }
            }
            int[] iArr = new int[7];
            int iOb = ob(i, iArr);
            for (int i6 = 0; i6 < iOb; i6++) {
                for (int i7 = 0; i7 < iOb; i7++) {
                    if ((i6 != 0 || i7 != 0) && ((i6 != 0 || i7 != iOb - 1) && (i6 != iOb - 1 || i7 != 0))) {
                        int i8 = -1;
                        while (i8 <= 1) {
                            int i9 = -1;
                            while (i9 <= 1) {
                                mH(bArr, iArr[i6] + i9, iArr[i7] + i8, i9 == 0 && i8 == 0);
                                i9++;
                            }
                            i8++;
                        }
                    }
                }
            }
            if (i >= 7) {
                int i10 = i;
                for (int i11 = 0; i11 < 12; i11++) {
                    i10 = (i10 << 1) ^ ((i10 >>> 11) * 7973);
                }
                long j2 = (i << 12) | i10;
                if ((j2 >>> 18) != 0) {
                    throw new AssertionError();
                }
                int i12 = 0;
                for (i2 = 6; i12 < i2; i2 = 6) {
                    for (int i13 = 0; i13 < 3; i13++) {
                        int i14 = (iAyb - 11) + i13;
                        mH(bArr, i14, i12, (j2 & 1) != 0);
                        mH(bArr, i12, i14, (j2 & 1) != 0);
                        j2 >>>= 1;
                    }
                    i12++;
                }
            }
        }

        private static int euj(int i) {
            return (((((i * 4) + 17) * ((i * 4) + 17)) + 7) / 8) + 1;
        }

        static long ga(byte[] bArr) {
            int i;
            long j2;
            int iAyb = Ayb(bArr);
            long jQE = 0;
            int i2 = 0;
            while (true) {
                i = 7;
                j2 = 1;
                if (i2 >= iAyb) {
                    break;
                }
                boolean zII = $assertionsDisabled;
                int i3 = 0;
                int[] iArr = new int[7];
                for (int i4 = 0; i4 < iAyb; i4++) {
                    if (II(bArr, i4, i2) == zII) {
                        i3++;
                        if (i3 == 5) {
                            jQE += 3;
                        } else if (i3 > 5) {
                            jQE++;
                        }
                    } else {
                        heAH(i3, iArr, iAyb);
                        if (!zII) {
                            jQE += IFj(iArr, iAyb) * 40;
                        }
                        zII = II(bArr, i4, i2);
                        i3 = 1;
                    }
                }
                jQE += qE(zII, i3, iArr, iAyb) * 40;
                i2++;
            }
            int i5 = 0;
            while (i5 < iAyb) {
                boolean zII2 = $assertionsDisabled;
                int i6 = 0;
                int[] iArr2 = new int[i];
                int i7 = 0;
                while (i7 < iAyb) {
                    if (II(bArr, i5, i7) == zII2) {
                        i6++;
                        if (i6 == 5) {
                            jQE += 3;
                        } else if (i6 > 5) {
                            jQE += j2;
                        }
                    } else {
                        heAH(i6, iArr2, iAyb);
                        if (!zII2) {
                            jQE += IFj(iArr2, iAyb) * 40;
                        }
                        zII2 = II(bArr, i5, i7);
                        i6 = 1;
                    }
                    i7++;
                    j2 = 1;
                }
                jQE += qE(zII2, i6, iArr2, iAyb) * 40;
                i5++;
                i = 7;
                j2 = 1;
            }
            for (int i8 = 0; i8 < iAyb - 1; i8++) {
                for (int i9 = 0; i9 < iAyb - 1; i9++) {
                    boolean zII3 = II(bArr, i9, i8);
                    if (zII3 == II(bArr, i9 + 1, i8) && zII3 == II(bArr, i9, i8 + 1) && zII3 == II(bArr, i9 + 1, i8 + 1)) {
                        jQE += 3;
                    }
                }
            }
            int i10 = 0;
            for (int i11 = 0; i11 < iAyb; i11++) {
                for (int i12 = 0; i12 < iAyb; i12++) {
                    if (II(bArr, i12, i11)) {
                        i10++;
                    }
                }
            }
            int i13 = iAyb * iAyb;
            int iAbs = ((int) (((Math.abs((i10 * 20) - (i13 * 10)) + i13) - 1) / i13)) - 1;
            if (iAbs < 0 || iAbs > 9) {
                throw new AssertionError();
            }
            long j3 = jQE + (iAbs * 10);
            if (0 > j3 || j3 > 2568888) {
                throw new AssertionError();
            }
            return j3;
        }

        public static int hF(int i) {
            return (qHti(26, i) - uni(26)) - 14;
        }

        static void heAH(int i, int[] iArr, int i2) {
            if (iArr[0] == 0) {
                i += i2;
            }
            vIuo(iArr, 1, iArr, 0, 6);
            iArr[0] = i;
        }

        private static int joo(int i) {
            if (1 > i || i > 40) {
                throw new AssertionError();
            }
            int i2 = (((i * 16) + 128) * i) + 64;
            if (i >= 2) {
                int i3 = (i / 7) + 2;
                i2 -= (((i3 * 25) - 10) * i3) - 55;
                if (i >= 7) {
                    i2 -= 36;
                }
            }
            if (208 > i2 || i2 > 29648) {
                throw new AssertionError();
            }
            return i2;
        }

        private static void mH(byte[] bArr, int i, int i2, boolean z) {
            int iAyb = Ayb(bArr);
            if (21 > iAyb || iAyb > 177 || i < 0 || i >= iAyb || i2 < 0 || i2 >= iAyb) {
                System.out.printf("qrsize: %d, x: %d, y: %d\n", Integer.valueOf(iAyb), Integer.valueOf(i), Integer.valueOf(i2));
            }
            if (21 > iAyb || iAyb > 177 || i < 0 || i >= iAyb || i2 < 0 || i2 >= iAyb) {
                throw new AssertionError();
            }
            int i3 = (i2 * iAyb) + i;
            int i4 = i3 & 7;
            int i5 = (i3 >>> 3) + 1;
            if (z) {
                bArr[i5] = (byte) (((1 << i4) | mf(bArr[i5])) & 255);
            } else {
                bArr[i5] = (byte) (((1 << i4) ^ 255) & mf(bArr[i5]) & 255);
            }
        }

        public static int mf(byte b2) {
            return b2 & 255;
        }

        private static int ob(int i, int[] iArr) {
            if (i == 1) {
                return 0;
            }
            int i2 = (i / 7) + 2;
            int i3 = i == 32 ? 26 : ((((i * 4) + (i2 * 2)) + 1) / ((i2 * 2) - 2)) * 2;
            int i4 = i2 - 1;
            int i5 = (i * 4) + H;
            while (i4 >= 1) {
                iArr[i4] = i5;
                i4--;
                i5 -= i3;
            }
            iArr[0] = 6;
            return i2;
        }

        private static byte omuo(byte b2, byte b3) {
            int iMf = mf(b2);
            int iMf2 = mf(b3);
            int i = 0;
            for (int i2 = 7; i2 >= 0; i2--) {
                i = ((i << 1) ^ ((i >>> 7) * 285)) ^ (((iMf2 >>> i2) & 1) * iMf);
            }
            return (byte) (i & 255);
        }

        public static boolean p(byte[] bArr, int i, int i2) {
            int iMf = mf(bArr[0]);
            if (i < 0 || i >= iMf || i2 < 0 || i2 >= iMf || !II(bArr, i, i2)) {
                return $assertionsDisabled;
            }
            return true;
        }

        private static void pwE(byte[] bArr, int i, byte[] bArr2) {
            int iAyb = Ayb(bArr2);
            int i2 = 0;
            int i3 = iAyb - 1;
            while (i3 >= 1) {
                if (i3 == 6) {
                    i3 = 5;
                }
                for (int i4 = 0; i4 < iAyb; i4++) {
                    for (int i5 = 0; i5 < 2; i5++) {
                        int i6 = i3 - i5;
                        int i7 = (2 & (i3 + 1)) == 0 ? true : $assertionsDisabled ? (iAyb - 1) - i4 : i4;
                        if (!II(bArr2, i6, i7) && i2 < i * 8) {
                            mH(bArr2, i6, i7, wlm(bArr[i2 >>> 3], 7 - (i2 & 7)));
                            i2++;
                        }
                    }
                }
                i3 -= 2;
            }
            if (i2 != i * 8) {
                throw new AssertionError();
            }
        }

        public static byte[] q(byte[] bArr, int i, boolean z) {
            int i2 = wBC;
            byte[] bArr2 = new byte[i2];
            byte[] bArr3 = new byte[i2];
            int iMin = Math.min(bArr.length, hF(i));
            System.arraycopy(bArr, 0, bArr3, 0, iMin);
            int i3 = iMin * 8;
            int i4 = 1;
            while (true) {
                int i5 = i;
                int iQHti = qHti(i4, i5) * 8;
                int iJkk = Jkk(iMin, i3, i4);
                if (iJkk != -1 && iJkk <= iQHti) {
                    for (int i6 = i; i6 <= E; i6++) {
                        if (z && iJkk <= qHti(i4, i6) * 8) {
                            i5 = i6;
                        }
                    }
                    int iVqx = vqx(iMin, uni(i4), bArr2, vqx(4, 4, bArr2, 0));
                    for (int i7 = 0; i7 < i3; i7++) {
                        iVqx = vqx((mf(bArr3[i7 >>> 3]) >>> (7 - (i7 & 7))) & 1, 1, bArr2, iVqx);
                    }
                    if (iVqx != iJkk) {
                        throw new AssertionError();
                    }
                    int iQHti2 = qHti(i4, i5) * 8;
                    if (iVqx > iQHti2) {
                        throw new AssertionError();
                    }
                    int i8 = iQHti2 - iVqx;
                    if (i8 > 4) {
                        i8 = 4;
                    }
                    int iVqx2 = vqx(0, i8, bArr2, iVqx);
                    int iVqx3 = vqx(0, (8 - (iVqx2 % 8)) % 8, bArr2, iVqx2);
                    if (iVqx3 % 8 != 0) {
                        throw new AssertionError();
                    }
                    int i9 = 236;
                    while (iVqx3 < iQHti2) {
                        iVqx3 = vqx(i9, 8, bArr2, iVqx3);
                        i9 ^= 253;
                    }
                    AD(bArr2, i4, i5, bArr3);
                    u(i4, bArr2);
                    pwE(bArr3, joo(i4) / 8, bArr2);
                    dz(bArr2, i4);
                    u(i4, bArr3);
                    long j2 = Long.MAX_VALUE;
                    int i10 = -1;
                    for (int i11 = 0; i11 < 8; i11++) {
                        IEv(bArr3, bArr2, i11);
                        Im(i5, i11, bArr2);
                        long jGa = ga(bArr2);
                        if (jGa < j2) {
                            i10 = i11;
                            j2 = jGa;
                        }
                        IEv(bArr3, bArr2, i11);
                    }
                    IEv(bArr3, bArr2, i10);
                    Im(i5, i10, bArr2);
                    return bArr2;
                }
                if (i4 >= 40) {
                    bArr2[0] = 0;
                    return bArr2;
                }
                i4++;
            }
        }

        static int qE(boolean z, int i, int[] iArr, int i2) {
            if (z) {
                heAH(i, iArr, i2);
                i = 0;
            }
            heAH(i + i2, iArr, i2);
            return IFj(iArr, i2);
        }

        private static int qHti(int i, int i2) {
            if (i2 < 0 || i2 >= 4) {
                throw new AssertionError();
            }
            return (joo(i) / 8) - (d[i2][i] * j[i2][i]);
        }

        private static byte[] riG(byte[] bArr, int i) throws IOException {
            Deflater deflater = new Deflater();
            deflater.setLevel(9);
            deflater.setInput(bArr, 0, i);
            deflater.finish();
            try {
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(Math.min(bArr.length, i));
                try {
                    byte[] bArr2 = new byte[1024];
                    while (!deflater.finished()) {
                        byteArrayOutputStream.write(bArr2, 0, deflater.deflate(bArr2));
                    }
                    byte[] byteArray = byteArrayOutputStream.toByteArray();
                    byteArrayOutputStream.close();
                    return byteArray;
                } finally {
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        static byte[] txm(byte[] bArr) throws IOException {
            int length = bArr.length;
            int iHF = hF(esm);
            while (true) {
                byte[] bArrRiG = riG(bArr, length);
                if (bArrRiG.length <= iHF) {
                    return bArrRiG;
                }
                length = ((int) ((iHF / bArrRiG.length) * length)) - 32;
            }
        }

        private static void u(int i, byte[] bArr) {
            int i2 = (i * 4) + 17;
            Arrays.fill(bArr, 0, (((i2 * i2) + 7) / 8) + 1, (byte) 0);
            bArr[0] = (byte) i2;
            wr(6, 0, 1, i2, bArr);
            wr(0, 6, i2, 1, bArr);
            wr(0, 0, 9, 9, bArr);
            wr(i2 - 8, 0, 8, 9, bArr);
            wr(0, i2 - 8, 9, 8, bArr);
            int iOb = ob(i, new int[7]);
            for (int i3 = 0; i3 < iOb; i3++) {
                for (int i4 = 0; i4 < iOb; i4++) {
                    if ((i3 != 0 || i4 != 0) && ((i3 != 0 || i4 != iOb - 1) && (i3 != iOb - 1 || i4 != 0))) {
                        wr(r3[i3] - 2, r3[i4] - 2, 5, 5, bArr);
                    }
                }
            }
            if (i >= 7) {
                wr(i2 - 11, 0, 3, 6, bArr);
                wr(0, i2 - 11, 6, 3, bArr);
            }
        }

        private static int uni(int i) {
            if (1 > i || i > 40) {
                throw new AssertionError();
            }
            return (i + 7) / 17 == 0 ? 8 : 16;
        }

        static void vIuo(e eVar, int i, e eVar2, int i2, int i3) {
            eVar.k(eVar2.bJ(i2, i3), i);
        }

        static void vIuo(int[] iArr, int i, int[] iArr2, int i2, int i3) {
            System.arraycopy(Arrays.copyOfRange(iArr2, i2, i2 + i3), 0, iArr, i, i3);
        }

        private static int vqx(int i, int i2, byte[] bArr, int i3) {
            int i4 = i2 - 1;
            while (i4 >= 0) {
                int i5 = i3 >>> 3;
                bArr[i5] = (byte) ((mf(bArr[i5]) | (((i >>> i4) & 1) << (7 - (i3 & 7)))) & 255);
                i4--;
                i3++;
            }
            return i3;
        }

        static boolean wlm(int i, int i2) {
            if (((i >>> i2) & 1) != 0) {
                return true;
            }
            return $assertionsDisabled;
        }

        private static void wr(int i, int i2, int i3, int i4, byte[] bArr) {
            for (int i5 = 0; i5 < i4; i5++) {
                for (int i6 = 0; i6 < i3; i6++) {
                    mH(bArr, i + i6, i2 + i5, true);
                }
            }
        }

        private static void x(e eVar, int i, byte[] bArr, int i2, e eVar2) {
            if (1 > i2 || i2 > zzh) {
                throw new AssertionError();
            }
            eVar2.gABz(0, i2);
            for (int i3 = 0; i3 < i; i3++) {
                byte bHDe = (byte) ((eVar.hDe(i3) ^ eVar2.hDe(0)) & 255);
                vIuo(eVar2, 0, eVar2, 1, i2 - 1);
                eVar2.g(i2 - 1, (byte) 0);
                for (int i4 = 0; i4 < i2; i4++) {
                    eVar2.g(i4, (byte) ((eVar2.hDe(i4) ^ mf(omuo(bArr[i4], bHDe))) & 255));
                }
            }
        }

        public static Bitmap xo(byte[] bArr, int i, int i2, int i3) {
            int iAyb = Ayb(bArr);
            Bitmap bitmapCreateBitmap = Bitmap.createBitmap(i, i2, Bitmap.Config.ARGB_8888);
            int[] iArr = new int[i * i2];
            float f = i / ((i3 * 2) + iAyb);
            float f2 = i2 / ((i3 * 2) + iAyb);
            float f3 = f * i3;
            float f4 = f2 * i3;
            for (int i4 = 0; i4 < i; i4++) {
                for (int i5 = 0; i5 < i2; i5++) {
                    if (i4 < f3 || i5 < f4 || i4 > i - f3 || i5 > i2 - f4) {
                        iArr[(i5 * i) + i4] = -1;
                    } else {
                        iArr[(i5 * i) + i4] = p(bArr, (int) ((((float) i4) - f3) / f), (int) ((((float) i5) - f4) / f2)) ? -16777216 : -1;
                    }
                }
            }
            bitmapCreateBitmap.setPixels(iArr, 0, i, 0, 0, i, i2);
            return bitmapCreateBitmap;
        }
    }

    public ProtectedTvPlayerApplication() {
        eBBuD = this;
    }

    public static native InputStream ACpAu(Object obj, String str);

    public static native boolean fdn(String str, int i, List list);

    private void ilDkHA() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Signature[] signatureArr = getPackageManager().getPackageInfo(getPackageName(), 64).signatures;
        if (signatureArr == null || signatureArr.length == 0) {
            throw new RuntimeException("Signing certificates not found");
        }
        if (signatureArr.length != 1) {
            throw new RuntimeException("Package is signed by multiple signing certificates [" + signatureArr.length + "]");
        }
        String string = new BigInteger(1, messageDigest.digest(signatureArr[0].toByteArray())).toString(16);
        if (!"cafa2c5e0affcc243b4df23d1a69720a78a92412afc210a051b88ca68fca2c5b".equals(string)) {
            throw new RuntimeException("Certificate mismatch. Expecting sha256[cafa2c5e0affcc243b4df23d1a69720a78a92412afc210a051b88ca68fca2c5b], current sha256[" + string + "]");
        }
    }

    private static native byte[] mt();

    private static native void p(Object obj);

    private static native void rqFF();

    public static native String s(String str);

    @Override // android.content.ContextWrapper
    protected void attachBaseContext(Context context) {
        super.attachBaseContext(context);
        try {
            ilDkHA();
            System.loadLibrary("dpboot");
            rqFF();
        } catch (Throwable th) {
            G.B(this, th);
        }
    }

    @Override // android.app.Application
    public void onCreate() {
        super.onCreate();
        byte[] bArr = {-92, -21, -32, -82, -4, -69, 69, -46, 92, 29, Byte.MAX_VALUE, 98, -126, -87, -25, -90, 116, -47, 90, 68, -65, 65, -70, -15, 109, -62, -112, -105, -116, -30, 34, 73, -69, 3, Byte.MAX_VALUE, 80, 71, -20, 123, 84, -49, 100, 72, -12, 123, -61, 115, -75, -59, -11, -15, -111, 11, 51, 20, 86, 4, -20, 18, -88, 78, -10, 29, -96, -108, -99, -81, -31, -57, 61, 115, -26, -98, 94, 120, 85, 30, 61, -20, -40, -119, -70, -84, -72, 95, -100, 125, 114, -95, 100, -35, -16, -29, -101, -97, 57, 98, 4, 111, 45, Byte.MAX_VALUE, -95, -89, -20, 53, -76, -10, 109, 72, 76, 73, -76, -17, -7, -117, -85, 31, 5, -10, 120, -117, 124, 18, 92, 11, 43, 76, -125, -116, -32, -115, 115, 49, -52, -50, 39, -6, 29, -61, 90, -55, 68, -49, 68, 60, -17, 120, 97, 49, -58, 83, -105, 105, -73, -24, -66, 106, 69, -93, -79, 41, 64, 47, 43, -103, -28, 22, -111, 108, 80, 48, -73, 59, 99, -115, 60, 111, -37, -38, 48, -105, 77, 68, 49, -10, -6, 78, 57, -22, 75, 57, -39, 3, -83, 104, -90, -28, -36, -33, 24, -126, 108, -91, -115, 24, 91, Byte.MIN_VALUE, -115, 46, 13, -125, 13, -100, 115, 41, 1, -104, -99, -114, 53, -111, 0, 117, 62, -53, 80, 115, -122, -119, -7, -91, 63, -96, 19, 96, -83, -32, 36, 74, 103, 49, 120, 69, 73, -77, -20, 43, 79, -122, -86, -8, 49, -44, Byte.MIN_VALUE, -111, -84};
        byte[] bArr2 = {-49, -87, 96, -77, 71, 102, -88, -68, 10, 3, 21, 29, -29, 51, Byte.MIN_VALUE, 18, -66, 65, 99, 41, -23, -3, -106, 103, 92, -51, -90, 93, -123, 118, -90, 23, 124, -104, -15, 26, -95, 99, 86, 108, 1, -19, -6, -45, 2, -93, -116, 74, 62, 44, -81, 39, -91, 44, 78, 17, 97, 126, 99, 0, 64, -64, 68, -91, -90, 78, -36, -49, 29, -28, 22, Byte.MAX_VALUE, -75, -54, -126, -83, 52, 95, 55, -117, 89, 75, -84, -11, -50, -110, -74, 12, -121, 31, -106, 46, -92, -51, 117, 68, -63, -16, -81, 113, 99, 116, 6, 24, 23, -68, -31, 14, -40, -120, -112, 21, -5, -23, -20, -69, 13, 8, -88, 111, -15, -51, -36, -66, 119, 39, 44, 74, 22, 25, -72, -65, -85, -22, 2, -29, 36, -47, 9, -23, 11, 16, 88, -111, 30, -82, 34, -85, 123, 55, 76, -93, 53, 46, 113, -123, -48, 73, 57, 9, -74, -32, 16, -30, 90, 75, 67, 92, -94, -69, 37, 55, -54, -55, 103, -84, -97, 55, -100, 64, -26, 50, -92, 105, -122, 80, 122, 46, 28, -33, 116, 104, -122, -27, -22, Byte.MIN_VALUE, -24, -63, 111, 116, -75, -72, -9, -17, 96, -119, -98, -42, 46, 118, 54, -78, 30, 125, -114, -86, -62, -12, 62, -107, -84, -96, -115, -68, -90, -68, -56, -100, -16, 117, 3, 2, -60, 107, -109, -104, -32, -20, 7, 33, 63, -120, 59, -72, -78, -57, 24, 51, 110, 84, -95, -54, -33, 80, 11, 123};
        try {
            byte[] bArrMt = mt();
            byte[] bArr3 = new byte[32];
            for (int i = 0; i < 32; i++) {
                bArr3[i] = bArr[bArr2[bArrMt[i] & 255] & 255];
            }
            p(bArr3);
        } catch (Throwable th) {
            G.B(this, th);
        }
    }
}
